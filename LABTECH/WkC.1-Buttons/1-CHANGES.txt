CHANGES TO THE DIGITAL CLOCK DISPLAY

Since we started on the project, the vendor selling clock displays
to our company has redesigned their product.  So some of what we did
before has to be changed a little.

NOTE: if the clock looks weird in PuTTy on Windows, go to the menu
and choose "Change Settings".  Then you want Window->Translation->
Remote Character Set, and choose "DEC-MCS".

Also, our employer hired a high-priced set of consultants to do a
code audit, and they were unhappy about all the global variables we
had.  They were also unhappy that we had calls to time functions (such
as localtime() in the controller, instead of the model.  So some
redesigning was done.

Read below to see what's different.



TITLE BAR:

There is a new function, "set_title_bar()", which takes the name of a
character array.  It copies 81 characters out of the array to another
memory location, and then copies the first 78 to the top line of the
screen.  (Remember C strings are terminated by null characters.)  If
the string contains a "-", then it shows as part of the frame.

You should declare a character array and space it out enough so that it
looks vaguely centered.  Then your main() function should call
"set_title_bar()" with that array as an argument.

Note: "set_title_bar()" copies 78 characters out of that memory location,
so if you only have 15 characters, it will get the next 63 bytes anyway.
That could result in random binary gibberish in the title bar, so be
sure you fill in all 78 characters of the string you want in the title.



BUTTON AND KEY EVENTS:

The new "LEDisplay.o" device driver can respond to button presses.
When a button is pressed, the device driver executes a "callback",
which is a function you specify.  (A sample callback is provided.)

The driver has a function with this prototype:

    int register_keyhandler( void(*f)(keybits) );

where "f" is a function which accepts an argument of type "keybits"
and returns void.  For the driver to access the callback function,
we have to say where in memory the compiled code for this function
is stored.  If you name your function "process_key()", then you would
put this in main():

    register_keyhandler(process_key);

(Note that you can just use the name of the function, because a function
name is treated as a pointer.  DO NOT put the parentheses after the name,
because that means "run this function and put the return value here".
You don't want the function to run, you want to access it as an object.)


The keycode passed to your callback function is 16 bits, with the
following rules:

 1) If the user typed a key, then the first eight bits are the ASCII
    keycode the the key that was typed, and the last eight bits are
    all zero.  If the user presses 'q', then you'll get 0x7100 .
    You can convert this to a simple character literal by shifting
    eight bits to the right.

 2) If the user clicked a button with the mouse, the first eight bits
    are all zero, and the last eight bits are split in two: the first
    four are the column, and the last four are the row.
    Rows and columns both start at "zero", so if I click the "24 Hr"
    button, you'll get 0x0000.  If I click the middle button in the
    bottom row, you'll get 0x0021.



SETTING BUTTON TEXT:

There is a new function, "set_key_text()", which takes an integer and
a pointer to char.  The integer, in the range 0-4, indicates which
button in row 2 you are setting.  The pointer should indicate what
text you want to appear on the button, up to six characters.  (You
can use extra spaces to center text on the button.)

You cannot change the text of the top 5 buttons.




SETTINGS FOR THE MODEL

Instead of a global variable in "clock.c" for the offset, and
having the controller run localtime(), the offset was moved to
"model.c", and functions were added to get/set the offset.

Also, tick() was moved to the model, where the offset can be
applied, and localtime() gets the object with the current time
information.  That's then passed to the controller, to send on
to the view.




SETTINGS FOR THE VIEW

Instead of global variables in "clock.c" and lots of arguments to
"show()", the code auditors recommended a design change where the
View would use a getter and setter, and the various settings would
be stored as bits in the View module.  Which bits mean what are
like from the Monsters homework, and you can use bit manipulation
to check if a bit is on, or to switch a bit on or off, as needed.

The "clock.c" file has been updated to process these settings.

Note especially that the Controller only calls "show()", and that
function in the View module decides whether to call show_text()
or show_led() based on the settings it has stored.

